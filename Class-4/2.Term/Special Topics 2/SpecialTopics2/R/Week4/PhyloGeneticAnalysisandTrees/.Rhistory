source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
# dot plot from fasta files
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
# dot plot from fasta files
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
library(seqinr)
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
# dot plot from fasta files
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
library(seqinr)
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="local", scoreOnly = FALSE)
myAlignment
# dot plot from fasta files
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
library(seqinr)
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
GC(myseq)
install.packages("seqinr")
library(seqinr)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\FastaFiles")
mysequence <- read.fasta(file = "data1.fasta")
names<-getName(mysequence)
names
mysequence2 <- read.fasta(file = "data2.fasta")
names2<-getName(mysequence2)
names2
length(names2)
write.fasta(mysequence2,names2, file.out = "data2Copy.fasta")
#details of sequences
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
#help(unlist)
table(myseq)
GC(myseq)
myseq <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(myseq, wordsize=2)
install.packages("seqinr")
library(seqinr)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\FastaFiles")
mysequence <- read.fasta(file = "data1.fasta")
names<-getName(mysequence)
names
mysequence2 <- read.fasta(file = "data2.fasta")
names2<-getName(mysequence2)
names2
length(names2)
write.fasta(mysequence2,names2, file.out = "data2Copy.fasta")
#details of sequences
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
#help(unlist)
table(myseq)
GC(myseq)
myseq <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(myseq, wordsize=2)
install.packages("seqinr")
install.packages("seqinr")
library(seqinr)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\FastaFiles")
mysequence <- read.fasta(file = "data1.fasta")
names<-getName(mysequence)
names
mysequence2 <- read.fasta(file = "data2.fasta")
names2<-getName(mysequence2)
names2
length(names2)
write.fasta(mysequence2,names2, file.out = "data2Copy.fasta")
#details of sequences
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
#help(unlist)
table(myseq)
GC(myseq)
myseq <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(myseq, wordsize=2)
seqinr::count(myseq, wordsize=4)
4
seqinr::count(myseq, wordsize=8)
seqinr::count(myseq, wordsize=4)
library(seqinr)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\FastaFiles")
mysequence <- read.fasta(file = "data1.fasta")
names<-getName(mysequence)
names
mysequence2 <- read.fasta(file = "data2.fasta")
names2<-getName(mysequence2)
names2
length(names2)
write.fasta(mysequence2,names2, file.out = "data2Copy.fasta")
#details of sequences
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
table(myseq)
GC(myseq)
myseq <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(myseq, wordsize=2)
seqinr::count(myseq, wordsize=4)
biocLite("Biostrings")
library(Biostrings)
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="local", scoreOnly = FALSE)
myAlignment
library(seqinr)
mysequence <- read.fasta(file = "data3.fasta")
# dot plot from fasta files
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
BiocManager::install("msa")
library(msa)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
help(msa)
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
# shows the location of the texshade.sty in local storage
system.file("tex", "texshade.sty", package="msa")
# shows the location of the texshade.sty in local storage
system.file("tex", "texshade.sty", package="msa")
# install.packages("ape")
library(ape)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\PhyloGeneticAnalysisandTrees")
myset<-c("U15717","U15718", "U15719", "U15720","U15721","U15722","U15723","U15724")
myseqs<-read.GenBank(myset)
mydist<-dist.dna(myseqs)
myphylo<-triangMtd(mydist)
png("phylo.png",height=5.5, width=5.5,units="in",res=300, pointsize=10)
par(mfrow=c(2,2))
plot(myphylo, type="phylogram", edge.color="red", cex=1, edge.width=1,main="(A) Phylogram")
plot(myphylo, type="cladogram", edge.color="red", cex=1, edge.width=1, main="(B) Cladogram")
plot(myphylo, type="fan", edge.color="red", cex=1, edge.width=1, main="(C) Fan")
plot(myphylo, type="unrooted", edge.color="red", cex=1, edge.width=1, main="(D) Unrooted")
dev.off()
library(Biostrings)
mynucleotide <- DNAString("aacataatgcagtagaacccatgagccc")
matchPattern(DNAString("ATG"), mynucleotide)
matchPattern("TAA", mynucleotide)
myCodonFinder <- function(sequence){
startCodon = DNAString("ATG") # Assign start codons
stopCodons = list("TAA", "TAG", "TGA") # Assign stop codons
codonPosition = list() #initialize the output to be returned as a list
codonPosition$Start = matchPattern(startCodon, sequence) #search start codons
x=list()
for(i in 1:3){ # iterate over all stop codons
x[[i]]= matchPattern(DNAString (stopCodons[[i]]), sequence)
codonPosition$Stop=x
}
return(codonPosition) # returns results
}
StartStops <- myCodonFinder(mynucleotide)
StartStops
