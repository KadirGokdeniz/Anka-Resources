names
mysequence2 <- read.fasta(file = "data2.fasta")
names<-getName(mysequence2)
names2
mysequence2 <- read.fasta(file = "data2.fasta")
names<-getName(mysequence2)
names2
mysequence2 <- read.fasta(file = "data2.fasta")
names<-getName(mysequence2)
names2
mysequence2 <- read.fasta(file = "data2.fasta")
mysequence2 <- read.fasta(file = "data2.fasta")
names<-getName(mysequence2)
names2
names2<-getName(mysequence2)
names2
mysequence2 <- read.fasta(file = "data2.fasta")
names2<-getName(mysequence2)
names2
write.fasta(mysequence,names2, file.out = "data2Copy.fasta")
write.fasta(mysequence2,names2, file.out = "data2Copy.fasta")
length(names2)
mysequence <- read.fasta(file = "data1.fasta")
names<-getName(mysequence)
names
table(myseq2)
myseq2 <-  "MTMDKSELVQKAKLAEQAERYDDMAAAMKAVTEQGHELSNEERNLLSVAYKNVVGARRSSWRVISSIEQKTERNEKKQQMGKEYREKIEAELQDICNDVLELLDKYLIPNATQPESKVFYLKMKGDYFRYLSEVASGDNKQTTVSNQQAYQEAFEISKKEMQPTHPIRLGLALNFSVFYYEILNSPEKACSLAKTAFDEAIAELDTLNEESYKDSTLIMQLLRDNLTWTSENQGDEGENLYFQ"
myseq2 <- strsplit(myseq2, "")
myseq2 <- unlist(myseq2)
table(myseq2)
GC(myseq2)
GD(myseq2)
GC(myseq2)
GC(myseq)
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
table(myseq)
GC(myseq)
seqinr::count(myseq, wordsize=2)
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
table(myseq)
GC(myseq)
seqinr::count(myseq, wordsize=2)
mysequence <- read.fasta(file = "data1.fasta")
seqinr::count(mysequence, wordsize=2)
mysequence <- read.fasta(file = "data1.fasta")
seqinr::count(mysequence, wordsize=2)
seqinr::count(mysequence, wordsize=4)
seqinr::count(mysequence, wordsize=2)
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq <- strsplit(myseq, "")
myseq <- unlist(myseq)
table(myseq)
GC(myseq)
seqinr::count(myseq, wordsize=2)
myseq<-s2c(mysec)
myseq<-s2c(myseq)
myseq <- "AAAATGCAGTAACCCATGCCAAAATGCAGTAA"
myseq<-s2c(myseq)
seqinr::count(myseq, wordsize=2)
count(myseq, wordsize=2)
a <- s2c("acgggtacggtcccatcgaa")
count(a, wordsize=2)
a <- s2c("acgggtacggtcccatcgaa")
seqinr::count(a, wordsize=2)
a")
seqinr::count(a, wordsize=4)
seqinr::count(a, wordsize=4)
a <- s2c("acgggtacggtcccatcgaa")
seqinr::count(a, wordsize=4)
a <- s2c("ATGCGCGATATCGCCGGGATCGTGAC")
seqinr::count(a, wordsize=2)
a <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(a, wordsize=2)
myseq <- s2c("atgcgcgtatagcgtagtacgcgcgcgatatg")
seqinr::count(myseq, wordsize=2)
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
library(Biostrings)
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
dotPlot(sequence1, sequence2, col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
sequence1<-s2c(sequence1)
sequence2<-s2c(sequence2)
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
sequence1 <- "GAATTCGGCTA"
sequence2 <- "GATTACCTA"
myScoringMat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
myScoringMat
gapOpen <- 2
gapExtend <- 1
myAlignment <- pairwiseAlignment(sequence1, sequence2,
substitutionMatrix = myScoringMat, gapOpening = gapOpen,
gapExtension = gapExtend, type="global", scoreOnly = FALSE)
myAlignment
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week3\\Alignment")
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[1], mysequence[2], col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
dotPlot(mysequence[[1]], mysequence[[1]], col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
aafile <- system.file("sequences/seqAA.fasta", package = "seqinr")
protein <- read.fasta(aafile)[[1]]
dotPlot(protein, protein, main = "Dot plot of a protein\nwsize = 1, wstep = 1, nmatch = 1")
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab="Human",ylab="Chimpanzee")
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
mysequence <- read.fasta(file = "data3.fasta")
names<-getName(mysequence)
names
dotPlot(mysequence[[1]], mysequence[[2]], col=c("white", "red"), xlab=names[1],ylab=names[2])
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
install.packages("muscle")
install.packages("muscle")
library(muscle)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("muscle")
library(muscle)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
install.packages("seqinr")
library(seqinr)
choosebank("genbank")
attributes(BRCA1)
query("BRCA1", "SP=Homo sapiens AND K=BRCA1")
query("BRCA1", "SP=Homo sapiens AND K=BRCA1")
query("BRCA1", "SP=Homo sapiens AND K=BRCA1")
mySeq <- muscle::read.fasta("fastaMSA.fasta")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("muscle")
library(muscle)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySeq <- muscle::read.fasta("fastaMSA.fasta")
mySeq <- read.fasta("fastaMSA.fasta")
mySeq <- muscle::read.fasta(file="fastaMSA.fasta")
mySeq <- read.fasta(file="fastaMSA.fasta")
seqs <- read.fasta(file = "unaligned.fasta")
library(muscle)
mySeq <- read.fasta(file="fastaMSA.fasta")
seqs <- read.fasta(file = "unaligned.fasta")
getwd()
library(muscle)
mySeq<- muscle::read.fasta("fastaMSA.fasta")# Please assign the path to the file fastaMSA.fasta (In the code directory for the chapter)
MyMSA <- muscle(mySeq)
print(MyMSA, from=1, to=51)
library(seqinr)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySeq <- read.fasta(file="fastaMSA.fasta")
mySeq <- muscle::read.fasta(file="fastaMSA.fasta")
MyMSA <- muscle(mySeq)
install.packages("ape")
library(ape)
myset <- c("U15717", "U15718", "U15719", "U15720", "U15721",
"U15722", "U15723", "U15724")
install.packages("ape")
library(ape)
myset <- c("U15717", "U15718", "U15719", "U15720", "U15721",
"U15722", "U15723", "U15724")
install.packages("ape")
myseqs <- read.GenBank(myset)
# install.packages("ape")
library(ape)
myset<-c("U15717","U15718", "U15719", "U15720","U15721","U15722","U15723","U15724")
myseqs<-read.GenBank(myset)
mydist<-dist.dna(myseqs)
myphylo<-triangMtd(mydist)
png("phylo.png",height=5.5, width=5.5,units="in",res=300, pointsize=10)
par(mfrow=c(2,2))
plot(myphylo, type="phylogram", edge.color="red", cex=1, edge.width=1,main="(A) Phylogram")
plot(myphylo, type="cladogram", edge.color="red", cex=1, edge.width=1, main="(B) Cladogram")
plot(myphylo, type="fan", edge.color="red", cex=1, edge.width=1, main="(C) Fan")
plot(myphylo, type="unrooted", edge.color="red", cex=1, edge.width=1, main="(D) Unrooted")
dev.off()
# install.packages("ape")
library(ape)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\PhyloGeneticAnalysisandTrees")
myset<-c("U15717","U15718", "U15719", "U15720","U15721","U15722","U15723","U15724")
myseqs<-read.GenBank(myset)
mydist<-dist.dna(myseqs)
myphylo<-triangMtd(mydist)
png("phylo.png",height=5.5, width=5.5,units="in",res=300, pointsize=10)
par(mfrow=c(2,2))
plot(myphylo, type="phylogram", edge.color="red", cex=1, edge.width=1,main="(A) Phylogram")
plot(myphylo, type="cladogram", edge.color="red", cex=1, edge.width=1, main="(B) Cladogram")
plot(myphylo, type="fan", edge.color="red", cex=1, edge.width=1, main="(C) Fan")
plot(myphylo, type="unrooted", edge.color="red", cex=1, edge.width=1, main="(D) Unrooted")
dev.off()
library(Biostrings)
mynucleotide <- DNAString("aacataatgcagtagaacccatgagccc")
matchPattern(DNAString("ATG"), mynucleotide)
matchPattern("TAA", mynucleotide)
myCodonFinder <- function(sequence){
startCodon = DNAString("ATG") # Assign start codons
stopCodons = list("TAA", "TAG", "TGA") # Assign stop codons
codonPosition = list() #initialize the output to be returned as a list
codonPosition$Start = matchPattern(startCodon, sequence) #search start codons
x=list()
for(i in 1:3){ # iterate over all stop codons
x[[i]]= matchPattern(DNAString (stopCodons[[i]]), sequence)
codonPosition$Stop=x
}
return(codonPosition) # returns results
}
StartStops <- myCodonFinder(mynucleotide)
source("myCodonFinder.R")
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
library(muscle)
mySeq<- muscle::read.fasta("fastaMSA.fasta")# Please assign the path to the file fastaMSA.fasta (In the code directory for the chapter)
MyMSA <- muscle(mySeq)
print(MyMSA, from=1, to=51)
BiocManager::install("msa")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(msa)
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
alignment<-msa(mySequences)
print(alignment, show="complete")
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(alignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
msaPrettyPrint(alignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
alignment<-msa(mySequences)
print(alignment, show="complete")
msaPrettyPrint(alignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(alignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
alignment<-msa(mySequences)
print(alignment, show="complete")
msaPrettyPrint(alignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
myalignment<-msa(mySequences)
print(myalignment, show="complete")
msaPrettyPrint(myalignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
msaPrettyPrint(myalignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(myalignment, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="none",
consensusColor="ColdHot", showLegend=FALSE,
askForOverwrite=FALSE)
msaPrettyPrint(myalignment, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="none",
consensusColor="ColdHot", showLegend=FALSE,
askForOverwrite=FALSE)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
msaPrettyPrint(myalignment, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="none",
consensusColor="ColdHot", showLegend=FALSE,
askForOverwrite=FALSE)
msaPrettyPrint(myalignment, output="pdf", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="none",
consensusColor="ColdHot", showLegend=FALSE,
askForOverwrite=FALSE)
msaPrettyPrint(myalignment, output="png", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="none",
consensusColor="ColdHot", showLegend=FALSE,
askForOverwrite=FALSE)
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
mySequenceFile <- system.file(".", "exampleAA.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequenceFile <- system.file("exampleAA.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
system.file("tex", "texshade.sty", package="msa")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(myalignment, output="tex", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
texi2pdf("myFirstAlignment.tex", clean=TRUE)
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
tmpFile
system.file("tex", "texshade.sty", package="msa")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(myalignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE, file=pdf_file)
msaPrettyPrint(myalignment, output="pdf", showNames="none", showLogo="none", askForOverwrite=FALSE, verbose=FALSE, file="out.pdf")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
install.packages("latexpdf")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
system.file("tex", "texshade.sty", package="msa")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
system.file("tex", "texshade.sty", package="msa")
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(msa)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
# following this function call, build the tex file in TexStudio
system.file("tex", "texshade.sty", package="msa")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(msa)
setwd("F:\\Dropbox\\University\\BioInformatics\\Slides\\R\\Week4\\MultipleSequenceAlignment")
mySequences <- readAAStringSet("fastaMSA.fasta")
mySequences
myalignment<-msa(mySequences, "Muscle")
print(myalignment, show="complete")
tmpFile <- tempfile(pattern="msa", tmpdir=".", fileext=".pdf")
tmpFile
msaPrettyPrint(myalignment, file=tmpFile, output="pdf",
showNames="left", showNumbering="none", showLogo="top",
showConsensus="bottom", logoColors="rasmol",
verbose=FALSE, askForOverwrite=FALSE)
# following this function call, build the tex file in TexStudio
system.file("tex", "texshade.sty", package="msa")
write.fasta(myalignment, file="aln.fasta")
install.packages("bio3d")
install.packages("Rknots")
install.packages("biomartr")
library(biomaRt)
library(biomaRtr)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
myMart <- useMart("unimart", dataset="uniprot")
myMart
listMarts()
myprotein <- loadProtein("1BG2")
plotDiagram(myprotein$A, ends = c(), lwd = 2.5)
ramp <- colorRamp(c('blue', ' white', ' red' ))
pal <- rgb(ramp(seq(0,1,length=100)), max=255)
plotKnot3D(myprotein$A, colors=list(pal), lwd=8, radius=0.4, showNC=TRUE, text=FALSE)
myprotein <- loadProtein("1BG2")
install.packages("Rknots")
myprotein <- loadProtein("1BG2")
plotDiagram(myprotein$A, ends = c(), lwd = 2.5)
ramp <- colorRamp(c('blue', ' white', ' red' ))
pal <- rgb(ramp(seq(0,1,length=100)), max=255)
plotKnot3D(myprotein$A, colors=list(pal), lwd=8, radius=0.4, showNC=TRUE, text=FALSE)
library(biomaRt)
myMart <- useMart("unimart", dataset="uniprot")
myMart
listAttributes(myMart)
myProt <- getBM(attributes=c("pdb_id","protein_name", "ensembl_id","go_id", "name"), filter="accession", values="O95544", mart=myMart)
myProt
ensemblMart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
myProtein <- biomaRt::getSequence(id=myProt$ensembl_id[1], type="ensembl_gene_id", seqType = "peptide", mart=ensemblMart)
myProtein$peptide[1]
#source("http://bioconductor.org/biocLite.R")
biocLite("UniProt.ws")
library(UniProt.ws)
availableUniprotSpecies(pattern="sapiens")
taxId(UniProt.ws) <- 9606
head(keytypes(UniProt.ws))
head(cols(UniProt.ws))
keys <- "O95544"
cols <- c("PDB", "UNIPROTKB", "SEQUENCE")
kt <- "UNIPROTKB"
myProtein2 <- select(UniProt.ws, keys, cols, kt)
myProtein2$SEQUENCE
install.packages("bio3d")
library(bio3d)
pdb1 <- read.pdb("1BG2")
pdb2 <- read.pdb("2VVG")
pdb3 <- read.pdb("1MKJ")
s1 <- aa321(pdb1$seqres)
s2 <- aa321(pdb2$seqres)
s3 <- aa321(pdb3$seqres)
raw <- seqbind(seqbind(s1, s2),s3)
aln <- seqaln(raw, id=c("1BG2","2VVG ","1MKJ "))
aln2html(aln, append=FALSE, file="Myalign.html")
install.packages("protr")
library(bio3d)
library(protr)
pdb1 <- read.pdb("1BG2")
s1 <- aa321(pdb1$seqres)
s1 <- paste(s1, sep="",collapse="")
library(seqinr)
s1 <- c2s(s1)
extractAAC(s1)
extractAPAAC(s1, props = c("Hydrophobicity", "Hydrophilicity"), lambda = 30, w = 0.05, customprops = NULL)
extractCTDC(s1)
extractCTDD(s1)
extractDC(s1)
install.packages("bio3d_2.0-1.tar.gz", repos=NULL, type="source")
library(bio3d)
pdb1 <- read.pdb("1BG2")
pdb2 <- read.pdb("2VVG")
pdb3 <- read.pdb("1MKJ")
s1 <- aa321(pdb1$seqres)
s2 <- aa321(pdb2$seqres)
s3 <- aa321(pdb3$seqres)
raw <- seqbind(seqbind(s1, s2),s3)
aln <- seqaln(raw, id=c("1BG2","2VVG ","1MKJ "))
aln2html(aln, append=FALSE, file="Myalign.html")
install.packages("Rknots")
myprotein <- loadProtein("1BG2")
library("Rknots")
myprotein <- loadProtein("1BG2")
plotDiagram(myprotein$A, ends = c(), lwd = 2.5)
ramp <- colorRamp(c('blue', ' white', ' red' ))
pal <- rgb(ramp(seq(0,1,length=100)), max=255)
plotKnot3D(myprotein$A, colors=list(pal), lwd=8, radius=0.4, showNC=TRUE, text=FALSE)
